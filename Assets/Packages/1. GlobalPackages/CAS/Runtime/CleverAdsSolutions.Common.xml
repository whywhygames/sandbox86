<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CleverAdsSolutions.Common</name>
    </assembly>
    <members>
        <member name="F:CAS.AdError.NoConnection">
            <summary>
            Loading ads cannot be successful without an internet connection.
            </summary>
        </member>
        <member name="F:CAS.AdError.NoFill">
            <summary>
            This means we are not able to serve ads to this person.
            
            <para>Note that if you can see ads while you are testing with enabled <see cref="P:CAS.IMediationManager.isTestAdMode"/>,
            your implementation works correctly and people will be able to see ads in your app once it's live.</para>
            </summary>
        </member>
        <member name="F:CAS.AdError.Configuration">
            <summary>
            A configuration error has been detected in one of the mediation ad networks.
            Please report error message to your manager support.
            </summary>
        </member>
        <member name="F:CAS.AdError.NotReady">
            <summary>
            Ad are not ready to show.
            You need to call Load ads or use one of the automatic cache mode.
            
            <para>If you are already using automatic cache mode then just wait a little longer.</para>
            <para>You can always check if ad is ready to show
            using <see cref="M:CAS.IMediationManager.IsReadyAd(CAS.AdType)"/> or <see cref="P:CAS.IAdView.isReady"/> methods.</para>
            </summary>
        </member>
        <member name="F:CAS.AdError.ManagerIsDisabled">
            <summary>
            The manager you want to use is not active at the moment.
            
            <para>To change the state of the manager, use <see cref="M:CAS.IMediationManager.SetEnableAd(CAS.AdType,System.Boolean)"/> method.</para>
            </summary>
        </member>
        <member name="F:CAS.AdError.ReachedCap">
            <summary>
            Ad creative has reached its daily cap for user.
            <para>The reason is for cross promo only.</para>
            </summary>
        </member>
        <member name="F:CAS.AdError.IntervalNotYetPassed">
            <summary>
            The interval between impressions of Interstitial Ad has not yet passed.
            <para>To change the interval, use <see cref="P:CAS.IAdsSettings.interstitialInterval"/> property.</para>
            </summary>
        </member>
        <member name="F:CAS.AdError.AlreadyDisplayed">
            <summary>
            You can not show ads because another fullscreen ad is being displayed at the moment.
            <para>Please check your ad call logic to eliminate duplicate impressions.</para>
            </summary>
        </member>
        <member name="F:CAS.AdError.AppIsPaused">
            <summary>
            Ads cannot be shown as the application is currently not visible to the user.
            </summary>
        </member>
        <member name="F:CAS.AdMetaData.type">
            <summary>
            The Format Type of the impression.
            </summary>
        </member>
        <member name="P:CAS.AdMetaData.network">
            <summary>
            The mediated networkâ€™s name that purchased the impression.
            </summary>
        </member>
        <member name="P:CAS.AdMetaData.revenue">
            <summary>
            The revenue generated for the impression (USD). 
            <para>The revenue value is either estimated or exact, according to the <see cref="P:CAS.AdMetaData.priceAccuracy"/> property.</para>
            </summary>
        </member>
        <member name="P:CAS.AdMetaData.cpm">
            <summary>
            The Cost Per Mille estimated impressions of the ad in USD.
            <para>The same value as <see cref="P:CAS.AdMetaData.revenue"/> multiplied by 1000.</para>
            </summary>
        </member>
        <member name="P:CAS.AdMetaData.priceAccuracy">
            <summary>
            Accuracy of the revenue value.
            </summary>
        </member>
        <member name="P:CAS.AdMetaData.creativeIdentifier">
            <summary>
            The creative id tied to the ad, if any. May be null.
            You can report creative issues to our Ad review team using this id.
            </summary>
        </member>
        <member name="P:CAS.AdMetaData.identifier">
            <summary>
            Internal demand source name in CAS database.
            </summary>
        </member>
        <member name="P:CAS.AdMetaData.impressionDepth">
            <summary>
            The amount of impressions of all ad formats to the current user for all sessions.
            </summary>
        </member>
        <member name="P:CAS.AdMetaData.lifetimeRevenue">
            <summary>
            The total revenue in USD from impressions of all ad formats to the current user for all sessions.
            </summary>
        </member>
        <member name="T:CAS.AdPosition">
            <summary>
            Ad Position on screen.
                    ___Left____Center____Right__
            Top     |   1    |   0    |    2   |
            Middle  |   7    |   6    |    8   |
            Bottom  |   4    |   3    |    5   |
            </summary>
        </member>
        <member name="F:CAS.AdPosition.Undefined">
            <summary>
            Service value to continue use previously Ad Position.
            </summary>
        </member>
        <member name="F:CAS.AdSize.Banner">
            <summary>
            Standard banner size 320dp width and 50dp height
            </summary>
        </member>
        <member name="F:CAS.AdSize.AdaptiveBanner">
            <summary>
            Pick Adaptive AdSize for screen width but not more than 728dp.
            <para>Pick the best ad size, adaptive banners use fixed aspect ratios instead of fixed heights.</para>
            <para>The height of adaptive banners cannot be less than 50 dp and more than 250 dp.</para>
            <para>This results in banner ads that occupy a more consistent portion
            of the screen across devices and provide opportunities for improved performance.</para>
            <para>Use <see cref="F:CAS.AdSize.AdaptiveFullWidth"/> to select full screen width</para>
            </summary>
        </member>
        <member name="F:CAS.AdSize.SmartBanner">
            <summary>
            Typically, Smart Banners on phones have a <see cref="F:CAS.AdSize.Banner"/> size.
            Or on tablets a <see cref="F:CAS.AdSize.Leaderboard"/> size.
            </summary>
        </member>
        <member name="F:CAS.AdSize.Leaderboard">
            <summary>
            Leaderboard banner size 728dp width and 90dp height
            </summary>
        </member>
        <member name="F:CAS.AdSize.MediumRectangle">
            <summary>
            Medium Rectangle size 300dp width and 250dp height
            </summary>
        </member>
        <member name="F:CAS.AdSize.AdaptiveFullWidth">
            <summary>
            Pick Adaptive AdSize for full screen width.
            <para>Pick the best ad size, adaptive banners use fixed aspect ratios instead of fixed heights.</para>
            <para>The height of adaptive banners cannot be less than 50 dp and more than 250 dp.</para>
            <para>This results in banner ads that occupy a more consistent portion
            of the screen across devices and provide opportunities for improved performance.</para>
            </summary>
        </member>
        <member name="F:CAS.AdSize.ThinBanner">
            <summary>
            Thin banners have a smaller height, taller banners compared to anchored adaptive banners.
            The thin banner uses the full available screen width.
            <para>Pick the best ad size in full width of screen and height 32-50 for Landscape and 50-90 for Portrait orientations.</para>
            <para>The height of thin banners can be 32 dp for landscape orientation.</para>
            </summary>
        </member>
        <member name="T:CAS.ConsentFlow">
            <summary>
            Use this object for configure Consent flow dialogs for GDPR.
            Create and attach the object to CAS initialization.
            <code>
            MobileAds.BuildManager()
                     .WithConsentFlow(new ConsentFlow()
                        .WithPrivacyPolicy("https://url_to_privacy_policy")
                     )
                     .Build();
            </code>
            By default, the consent flow will be shown to users who are protected by laws.
            You can prevent us from showing the consent dialog to the user ussing followed lines:
            <code>
            MobileAds.BuildManager()
                     .WithConsentFlow(new ConsentFlow(isEnabled: false))
                     .Build();
            </code>
            You can also display Consent Flow at any time using the show functions:
            <code>
            new ConsentFlow()
               .WithCompletionListener((status) =>
               {
                   Debug.Log("Consent flow completed with status: " + status.ToString());
               })
               .ShowIfRequired();
            </code>
            </summary>
        </member>
        <member name="M:CAS.ConsentFlow.#ctor(System.Boolean)">
            <summary>
            Create Conset flow configuration
            </summary>
            <param name="isEnabled">Is enabled auto display consent flow if required on Ads initialization.</param>
        </member>
        <member name="M:CAS.ConsentFlow.WithPrivacyPolicy(System.String)">
            <summary>
            Override a link to the App's Privacy Policy in the consent dialog.
            </summary>
        </member>
        <member name="M:CAS.ConsentFlow.WithCompletionListener(System.Action{CAS.ConsentFlow.Status})">
            <summary>
            Set a listener to be invoked when the dialog is dismissed.
            The <see cref="T:CAS.ConsentFlow.Status"/> with which the dialog is dismissed will be passed to the listener function.
            </summary>
        </member>
        <member name="M:CAS.ConsentFlow.WithCompletionListener(System.Action)">
            <summary>
            Set a listener to be invoked when the dialog is dismissed.
            </summary>
        </member>
        <member name="M:CAS.ConsentFlow.WithDebugGeography(CAS.ConsentFlow.DebugGeography)">
            <summary>
            Sets the debug geography for testing purposes.
            Note that debug settings only work with Test Ad Mode enabled or for <see cref="M:CAS.IAdsSettings.SetTestDeviceIds(System.Collections.Generic.IList{System.String})"/>.
            Default value is <see cref="F:CAS.ConsentFlow.DebugGeography.EEA"/>
            </summary>
        </member>
        <member name="F:CAS.ConsentFlow.Status.Obtained">
            <summary>
            User consent obtained. Personalized vs non-personalized undefined.
            </summary>
        </member>
        <member name="F:CAS.ConsentFlow.Status.NotRequired">
            <summary>
            User consent not required.
            </summary>
        </member>
        <member name="F:CAS.ConsentFlow.Status.Unavailable">
            <summary>
            User consent unavailable.
            </summary>
        </member>
        <member name="F:CAS.ConsentFlow.Status.InternalError">
            <summary>
            There was an internal error.
            </summary>
        </member>
        <member name="F:CAS.ConsentFlow.Status.InternetError">
            <summary>
            There was an error loading data from the network.
            </summary>
        </member>
        <member name="F:CAS.ConsentFlow.Status.ContextInvalid">
            <summary>
            There was an error with the UI context is passed in.
            </summary>
        </member>
        <member name="F:CAS.ConsentFlow.Status.FlowStillShowing">
            <summary>
            There was an error with another form is still being displayed.
            </summary>
        </member>
        <member name="F:CAS.ConsentFlow.DebugGeography.Disabled">
            <summary>
            Disable geography debugging.
            </summary>
        </member>
        <member name="F:CAS.ConsentFlow.DebugGeography.EEA">
            <summary>
            Geography appears as in European Economic Area for debug devices.
            </summary>
        </member>
        <member name="F:CAS.ConsentFlow.DebugGeography.NotEEA">
            <summary>
            Geography appears as not in European Economic Area.
            </summary>
        </member>
        <member name="F:CAS.ConsentStatus.Undefined">
            <summary>
            Mediation ads network behavior
            </summary>
        </member>
        <member name="F:CAS.ConsentStatus.Accepted">
            <summary>
            User consents to behavioral targeting in compliance with GDPR.
            </summary>
        </member>
        <member name="F:CAS.ConsentStatus.Denied">
            <summary>
            User does not consent to behavioral targeting in compliance with GDPR.
            </summary>
        </member>
        <member name="F:CAS.CCPAStatus.Undefined">
            <summary>
            Mediation ads network behavior
            </summary>
        </member>
        <member name="F:CAS.CCPAStatus.OptOutSale">
            <summary>
            User does not consent to the sale of his or her personal information in compliance with CCPA.
            </summary>
        </member>
        <member name="F:CAS.CCPAStatus.OptInSale">
            <summary>
            User consents to the sale of his or her personal information in compliance with CCPA.
            </summary>
        </member>
        <member name="F:CAS.Audience.Mixed">
            <summary>
            The user's age has not been determined.
            
            <para>If your app's target age groups include both children and older audiences,
            any ads that may be shown to children must comply with Google Play's Families Ads Program.
            A neutral age screen must be implemented so that any ads not suitable for children are only shown to older audiences.
            A neutral age screen is a mechanism to verify a user's age in a way that doesn't encourage them to falsify their age
            and gain access to areas of your app that aren't designed for children, for example, an age gate.</para>
            <para>You could change the audience at runtime after determining the user's age.</para>
            </summary>
        </member>
        <member name="F:CAS.Audience.Children">
             <summary>
             Audiences under the age of 13 who subject of COPPA.
            
             <para>When using this feature, a Tag For Users under the Age of Consent in Europe (TFUA) parameter
             will be included in the ad request.
             Also the state of GDPR and CCPA will be overridden automatically
             to <see cref="F:CAS.ConsentStatus.Denied"/> and <see cref="F:CAS.CCPAStatus.OptOutSale"/></para>
            
             <para>It also allows application to comply with the Google Play Families Policy requirements:</para>
             <para>- Ads displayed to those users do not involve interest-based advertising or remarketing;</para>
             <para>- Ads displayed to those users present content that is appropriate for children;</para>
             <para>- Ads displayed to those users follow the Families ad format requirements;</para>
             <para>- Compliance with all applicable legal regulations and industry standards relating to advertising to children.</para>
             </summary>
        </member>
        <member name="F:CAS.Audience.NotChildren">
            <summary>
            Audiences over the age of 13 NOT subject to the restrictions of child protection laws.
            </summary>
        </member>
        <member name="P:CAS.IAdsSettings.userConsent">
            <summary>
            GDPR user Consent SDK Implementation for ads on session.
            <para>Default: <see cref="F:CAS.ConsentStatus.Undefined"/></para>
            </summary>
        </member>
        <member name="P:CAS.IAdsSettings.userCCPAStatus">
            <summary>
            Whether or not user has opted out of the sale of their personal information.
            <para>Default: <see cref="F:CAS.CCPAStatus.Undefined"/></para>
            </summary>
        </member>
        <member name="P:CAS.IAdsSettings.taggedAudience">
            <summary>
            Ad filters by Audience
            <para>By default selected in `Assets/CleverAdsSolutions/Settings` menu</para>
            </summary>
        </member>
        <member name="P:CAS.IAdsSettings.trialAdFreeInterval">
            <summary>
            Defines the time interval, in seconds, starting from the moment of the initial app installation,
            during which users can use the application without ads being displayed while still retaining
            access to the Rewarded Ads format.
            <para>Within this interval, users enjoy privileged access to the application's features without intrusive advertisements.</para>
            <para>0 seconds by default.</para>
            </summary>
        </member>
        <member name="P:CAS.IAdsSettings.bannerRefreshInterval">
            <summary>
            An ad unitâ€™s automatic refresh rate (in seconds) determines how often a new ad request is generated for that ad unit.  
            <para>Ad requests should not be made when the device screen is turned off.</para>
            <para>We recomended using refresh rate 30 seconds.</para>
            <para>However, you can choose any value you want longer than 10 seconds.</para>
            <para>30 seconds by default.</para>
            </summary>
        </member>
        <member name="P:CAS.IAdsSettings.interstitialInterval">
            <summary>
            You can limit the posting of an interstitial ad to a period of time in seconds after the ad is closed,
            during which display attempts will fail.
            <para>Default: 0 seconds.</para>
            <para>Note that the interval starts only after the Interstitial Ad closes <see cref="E:CAS.IMediationManager.OnInterstitialAdClosed"/>.</para>
            <para>If you need to wait for a period of time after the start of the game or after showing a Rewarded Ad
            until next Interstitial Ad impression then please call the following method: <see cref="M:CAS.IAdsSettings.RestartInterstitialInterval"/></para>
            </summary>
        </member>
        <member name="M:CAS.IAdsSettings.RestartInterstitialInterval">
            <summary>
            Restart interval until next Interstitial ad display.
            <para>By default, the interval before first Interstitial Ad impression is ignored.</para>
            <para>You can use this method to delay displaying ad.</para>
            </summary>
        </member>
        <member name="P:CAS.IAdsSettings.isMutedAdSounds">
            <summary>
            Sounds in ads mute state
            <para>Disabled by default.</para>
            </summary>
        </member>
        <member name="P:CAS.IAdsSettings.allowInterstitialAdsWhenVideoCostAreLower">
            <summary>
            This option will compare ad cost and serve regular interstitial ads
            when rewarded video ads are expected to generate less revenue.
            <para>Interstitial Ads does not require to watch the video to the end,
            but the <see cref="E:CAS.IMediationManager.OnRewardedAdCompleted"/> callback will be triggered in any case.</para>
            <para>By default selected in `Assets/CleverAdsSolutions/Settings` menu</para>
            </summary>
        </member>
        <member name="P:CAS.IAdsSettings.isDebugMode">
            <summary>
            The enabled Debug Mode will display a lot of useful information for debugging about the states of the sdc with tag `CAS`.  
            <para>Disabling Debug Mode may improve application performance.</para>
            Disabled by default.
            </summary>
        </member>
        <member name="M:CAS.IAdsSettings.SetTestDeviceIds(System.Collections.Generic.IList{System.String})">
            <summary>
            Identifiers corresponding to test devices which will always request test ads.
            List of test devices should be defined before first MediationManager initialized.
            <para>1. Run an app configured with the CAS SDK.</para>
            <para>2. Check the console or logcat output for a message that looks like this:
            "To get test ads on this device, set ... "</para>
            <para>3. Copy your alphanumeric test device ID to your clipboard.</para>
            <para>4. Add the test device ID to the list.</para>
            </summary>
        </member>
        <member name="P:CAS.IAdsSettings.loadingMode">
            <summary>
            CAS mediation processing mode of ad requests.
            <para>By default selected in `Assets/CleverAdsSolutions/Settings` menu</para>
            </summary>
        </member>
        <member name="P:CAS.IAdsSettings.isExecuteEventsOnUnityThread">
            <summary>
            <para>Required for Android runtime only. Enabled by default.</para>
            Advertising events for the Android runtime are queued to be called during the next `Update()` cycle. 
            This behavior is safe for using UnityEngine components in advertising events. 
            However, because Unity does not call `Update` while displaying fullscreen ads, 
            all ad events will only be triggered after closing the fullscreen ad and returning to the Unity game.  
            <para> If you want to receive callbacks from the ad without waiting for the ad to close, 
            you can disable the following property in the settings. 
            You will also need to use `CAS.EventExecutor.Add(Action)` to access Unity Engine components, 
            where Action will be executed during the next `Update()` cycle.</para>
            </summary>
        </member>
        <member name="P:CAS.IAdsSettings.iOSAppPauseOnBackground">
            <summary>
            Indicates if the Unity app should be paused when a full screen ad (interstitial
            or rewarded video ad) is displayed.
            <para>Enabled by default.</para>
            </summary>
        </member>
        <member name="P:CAS.IAdsSettings.trackLocationEnabled">
            <summary>
            The SDK automatically collects location data if the user allowed the app to track the location.
            <para>By default selected in `Assets/CleverAdsSolutions/Settings` menu</para>
            </summary>
        </member>
        <member name="E:CAS.IAdView.OnLoaded">
            <summary>
            Called when the ad loaded and ready to present.
            </summary>
        </member>
        <member name="E:CAS.IAdView.OnFailed">
            <summary>
            Ð¡alled when an error occurred with the ad.
            </summary>
        </member>
        <member name="E:CAS.IAdView.OnImpression">
            <summary>
            Called when the ad impression detects paid revenue. 
            </summary>
        </member>
        <member name="E:CAS.IAdView.OnClicked">
            <summary>
            Called when the user clicks on the Ad.
            </summary>
        </member>
        <member name="P:CAS.IAdView.manager">
            <summary>
            Get the manager of the AdView.
            </summary>
        </member>
        <member name="P:CAS.IAdView.size">
            <summary>
            Current ad size.
            <para>You cannot resize ad, but instead get the new <see cref="T:CAS.IAdView"/> for the size you want
            using the <see cref="M:CAS.IMediationManager.GetAdView(CAS.AdSize)"/> method.</para>
            </summary>
        </member>
        <member name="P:CAS.IAdView.rectInPixels">
            <summary>
            Get the real AdView rect with position and size in pixels on screen.
            <para>Return <see cref="P:UnityEngine.Rect.zero"/> when ad view is not active.</para>
            <para>The position on the screen is calculated with the addition of indents for the cutouts.</para>
            </summary>
        </member>
        <member name="P:CAS.IAdView.isReady">
            <summary>
            Check ready ads to present
            </summary>
        </member>
        <member name="P:CAS.IAdView.refreshInterval">
            <summary>
            Set the number of seconds an ad is displayed before a new ad is shown.
            After the interval has passed, a new advertisement will be automatically loaded.
            <para>This value will override global <see cref="P:CAS.IAdsSettings.bannerRefreshInterval"/></para>
            </summary>
        </member>
        <member name="M:CAS.IAdView.DisableRefresh">
            <summary>
            Disable auto refresh ads.
            </summary>
        </member>
        <member name="P:CAS.IAdView.position">
            <summary>
            The position where the AdView ad should be placed.
            The <see cref="T:CAS.AdPosition"/> enum lists the valid ad position values.
            <para>Default: <see cref="F:CAS.AdPosition.BottomCenter"/></para>
            </summary>
        </member>
        <member name="M:CAS.IAdView.SetPosition(System.Int32,System.Int32,CAS.AdPosition)">
            <summary>
            The AdView will be positioned at the X and Y values passed to the method,
            where the origin is the selected <see cref="T:CAS.AdPosition"/> corner of the screen.
            <para>The coordinates on the screen are determined not in pixels, but in Density-independent Pixels(DP)!</para>
            </summary>
            <param name="x">X-coordinate on screen in DP.</param>
            <param name="y">Y-coordinate on screen in DP.</param>
            <param name="position">The corner of the screen.</param>
        </member>
        <member name="M:CAS.IAdView.SetPositionPx(System.Int32,System.Int32,CAS.AdPosition)">
            <summary>
            The AdView will be positioned at the X and Y values passed to the method,
            where the origin is the selected <see cref="T:CAS.AdPosition"/> corner of the screen.
            <para>The coordinates on the screen are determined in pixels.</para>
            </summary>
            <param name="x">X-coordinate on screen in pixels.</param>
            <param name="y">Y-coordinate on screen in pixels.</param>
            <param name="position">The corner of the screen.</param>
        </member>
        <member name="M:CAS.IAdView.Load">
            <summary>
            Manual load the Ad or reload current loaded Ad to skip impression.
            <para>You can get a callback for the successful loading of an ad by subscribe to <see cref="E:CAS.IAdView.OnLoaded"/>.</para>
            </summary>
        </member>
        <member name="M:CAS.IAdView.SetActive(System.Boolean)">
            <summary>
            Activate or deactivate the AdView
            <para>If the AdView is active, it is displayed on the screen and user can interact with it.</para>
            <para>When you need to hide AdView from the user, just deactivate it.</para>
            </summary>
        </member>
        <member name="M:CAS.IManagerBuilder.Build">
            <summary>
            Initialize new <see cref="T:CAS.IMediationManager"/> and save to CAS.MobileAds.manager field.
            Can be called for different identifiers to create different managers.
            <para>Attention! Do not initialize mediated advertising SDKs (CAS does that for you).
            Not following this step will result in noticeable integration issues.</para>
            </summary>
            <exception cref="T:System.NotSupportedException">Not supported platform. Allowed Android, iOS and Editor only</exception>
            <exception cref="T:System.ArgumentNullException">CAS ID are not found</exception>
        </member>
        <member name="M:CAS.IManagerBuilder.WithCASId(System.Int32)">
            <summary>
            An CAS manager ID is a unique ID number assigned to each of your ad placements when they're created in CAS.
            <para>Using Manager Id at Index from list <b>`Assets/CleverAdsSolutions/Settings`</b> menu.</para>
            <para>Index 0 by default when the method is not called.</para>
            </summary>
            <exception cref="T:System.ArgumentNullException">CAS ID are not found with index</exception>
        </member>
        <member name="M:CAS.IManagerBuilder.WithCASId(System.String)">
            <summary>
            An CAS manager ID is a unique ID number assigned to each of your ad placements when they're created in CAS.
            <para>Typically, Manager ID for Adnroid equals the App Bundle ID, and for iOS the iTunes ID.</para>
            <para>The manager ID is added to your app's code and used to identify ad requests.</para>
            <para><b>Attention</b> The identifier is different for each platforms.
            You need to define different identifiers depending on the current platform.</para>
            <para>You can use a generic way to get the ID by ordinal index <see cref="M:CAS.IManagerBuilder.WithManagerIdAtIndex(System.Int32)"/> for current platform.</para>
            <para>Please set all used Manager IDs in `Assets > CleverAdsSolutions > Settings` menu to setup the project correctly.</para>
            </summary>
            <exception cref="T:System.ArgumentNullException">CAS ID are is empty</exception>
        </member>
        <member name="M:CAS.IManagerBuilder.WithCompletionListener(CAS.CASInitCompleteEvent)">
            <summary>
            Set listener to receive a callback after all CAS initialization processes have completed.
            </summary>
        </member>
        <member name="M:CAS.IManagerBuilder.WithEnabledAdTypes(CAS.AdFlags[])">
            <summary>
            An Enabled Ad types is option to increase application performance by initializing only those ad types that will be used.
            <code>
            .withEnabledAdTypes(AdFlags.Banner, AdFlags.Interstitial)
            </code>
            <para>Changes in current session only.</para>
            <para>Ad types can be enabled manually after initialize by <see cref="M:CAS.IMediationManager.SetEnableAd(CAS.AdType,System.Boolean)"/></para>
            </summary>
        </member>
        <member name="M:CAS.IManagerBuilder.WithUserID(System.String)">
            <summary>
            The userID is a unique identifier supplied by your application and must be static for each user across sessions.
            Your userID should not contain any personally identifiable information such as
            an email address, screen name, Android ID(AID), or Google Advertising ID(GAID).
            </summary>
        </member>
        <member name="M:CAS.IManagerBuilder.WithConsentFlow(CAS.ConsentFlow)">
            <summary>
            Create and attach the Conset flow configuration for initialization.
            <code>
            .withConsentFlow(
               new ConsentFlow()
                  .withPrivacyPolicy("https://url_to_privacy_policy")
            )
            </code>
            CAS consent flow is enabled by default.
            You can disable the consent flow by building Ad Manager:
            <code>
            .withConsentFlow(new ConsentFlow(isEnabled: false))
            </code>
            </summary>
        </member>
        <member name="M:CAS.IManagerBuilder.WithMediationExtras(System.String,System.String)">
            <summary>
            Additional mediation settings.
            Use constant key from <see cref="T:CAS.MediationExtras"/> with values of "1" or "0".
            </summary>
        </member>
        <member name="M:CAS.IManagerBuilder.ClearMediationExtras">
            <summary>
            Clear additional mediation settings.
            </summary>
        </member>
        <member name="M:CAS.IManagerBuilder.WithTestAdMode(System.Boolean)">
            <summary>
            Option to enable Test ad mode that will always request test ads.
            <para>If you're just looking to experiment with the SDK in a Hello World app, though, you can use the true with any manager ID string.</para>
            <para><b>Don't forget to set False test ad mode to release application.</b></para>
            </summary>
        </member>
        <member name="M:CAS.IManagerBuilder.WithInitListener(CAS.InitCompleteAction)">
            <summary>
            Same as <see cref="M:CAS.IManagerBuilder.WithCompletionListener(CAS.CASInitCompleteEvent)"/>
            </summary>
        </member>
        <member name="M:CAS.IManagerBuilder.WithManagerIdAtIndex(System.Int32)">
            <summary>
            Same as <see cref="M:CAS.IManagerBuilder.WithCASId(System.Int32)"/> method. 
            </summary>
            <exception cref="T:System.ArgumentNullException">CAS ID are not found with index</exception>
        </member>
        <member name="M:CAS.IManagerBuilder.WithManagerId(System.String)">
            <summary>
            Same as <see cref="M:CAS.IManagerBuilder.WithCASId(System.String)"/> method. 
            </summary>
            <exception cref="T:System.ArgumentNullException">CAS ID is empty</exception>
        </member>
        <member name="M:CAS.IManagerBuilder.Initialize">
            <summary>
            Same as <see cref="M:CAS.IManagerBuilder.Build"/> method.
            </summary>
            <exception cref="T:System.NotSupportedException">Not supported platform. Allowed Android, iOS and Editor only</exception>
            <exception cref="T:System.ArgumentNullException">CAS ID are not found</exception>
        </member>
        <member name="T:CAS.IMediationManager">
            <summary>
            Interface for managing CAS mediation.
            Get instance using the CAS.MobileAds.BuildManager() builder.
            </summary>
        </member>
        <member name="E:CAS.IMediationManager.OnInterstitialAdLoaded">
            <summary>
            Called when ad ready to shown.
            </summary>
        </member>
        <member name="E:CAS.IMediationManager.OnInterstitialAdFailedToLoad">
            <summary>
            Called when failed to load ad response with error message
            </summary>
        </member>
        <member name="E:CAS.IMediationManager.OnInterstitialAdShown">
            <summary>
            Called when the ad is displayed.
            </summary>
        </member>
        <member name="E:CAS.IMediationManager.OnInterstitialAdOpening">
            <summary>
            The same call as the <see cref="E:CAS.IMediationManager.OnInterstitialAdShown"/> but with <see cref="T:CAS.AdMetaData"/> about the impression. 
            </summary>
        </member>
        <member name="E:CAS.IMediationManager.OnInterstitialAdImpression">
            <summary>
            Called when the ad impression detects paid revenue.
            </summary>
        </member>
        <member name="E:CAS.IMediationManager.OnInterstitialAdFailedToShow">
            <summary>
            Called when the ad is failed to display.
            </summary>
        </member>
        <member name="E:CAS.IMediationManager.OnInterstitialAdClicked">
            <summary>
            Called when the user clicks on the Ad.
            </summary>
        </member>
        <member name="E:CAS.IMediationManager.OnInterstitialAdClosed">
            <summary>
            Called when the ad is closed.
            </summary>
        </member>
        <member name="E:CAS.IMediationManager.OnRewardedAdLoaded">
            <summary>
            Called when ad ready to shown.
            </summary>
        </member>
        <member name="E:CAS.IMediationManager.OnRewardedAdFailedToLoad">
            <summary>
            Called when failed to load ad response with error message
            </summary>
        </member>
        <member name="E:CAS.IMediationManager.OnRewardedAdShown">
            <summary>
            Called when the ad is displayed.
            </summary>
        </member>
        <member name="E:CAS.IMediationManager.OnRewardedAdOpening">
            <summary>
            The same call as the <see cref="E:CAS.IMediationManager.OnRewardedAdShown"/> but with <see cref="T:CAS.AdMetaData"/> about the impression. 
            </summary>
        </member>
        <member name="E:CAS.IMediationManager.OnRewardedAdImpression">
            <summary>
            Called when the ad impression detects paid revenue.
            </summary>
        </member>
        <member name="E:CAS.IMediationManager.OnRewardedAdFailedToShow">
            <summary>
            Called when the ad is failed to display.
            </summary>
        </member>
        <member name="E:CAS.IMediationManager.OnRewardedAdClicked">
            <summary>
            Called when the user clicks on the Ad.
            </summary>
        </member>
        <member name="E:CAS.IMediationManager.OnRewardedAdCompleted">
            <summary>
            Called when the ad is completed.
            </summary>
        </member>
        <member name="E:CAS.IMediationManager.OnRewardedAdClosed">
            <summary>
            Called when the ad is closed.
            </summary>
        </member>
        <member name="E:CAS.IMediationManager.OnAppOpenAdLoaded">
            <summary>
            Called when ad ready to shown.
            </summary>
        </member>
        <member name="E:CAS.IMediationManager.OnAppOpenAdFailedToLoad">
            <summary>
            Called when failed to load ad response with error message
            </summary>
        </member>
        <member name="E:CAS.IMediationManager.OnAppOpenAdShown">
            <summary>
            Called when the ad is displayed.
            </summary>
        </member>
        <member name="E:CAS.IMediationManager.OnAppOpenAdImpression">
            <summary>
            Called when the ad impression detects paid revenue.
            </summary>
        </member>
        <member name="E:CAS.IMediationManager.OnAppOpenAdFailedToShow">
            <summary>
            Called when the ad is failed to display.
            </summary>
        </member>
        <member name="E:CAS.IMediationManager.OnAppOpenAdClicked">
            <summary>
            Called when the user clicks on the Ad.
            </summary>
        </member>
        <member name="E:CAS.IMediationManager.OnAppOpenAdClosed">
            <summary>
            Called when the ad is closed.
            </summary>
        </member>
        <member name="P:CAS.IMediationManager.managerID">
            <summary>
            The CAS identifier
            </summary>
        </member>
        <member name="P:CAS.IMediationManager.isTestAdMode">
            <summary>
            Is Mediation manager use test ads for current session.
            </summary>
        </member>
        <member name="M:CAS.IMediationManager.LoadAd(CAS.AdType)">
            <summary>
            Manual load <see cref="T:CAS.AdType"/> Ad.
            <para>Please call load before each show ad whe active load mode is <see cref="F:CAS.LoadingManagerMode.Manual"/>.</para>
            <para>You can get a callback for the successful loading of an ad by subscribe OnLoadedAd events</para>
            <para>Please for <see cref="F:CAS.AdType.Banner"/> use new ad size api <see cref="M:CAS.IMediationManager.GetAdView(CAS.AdSize)"/>.Load() instead.</para>
            </summary>
        </member>
        <member name="M:CAS.IMediationManager.IsReadyAd(CAS.AdType)">
            <summary>
            Check ready selected <see cref="T:CAS.AdType"/> to show.
            <para>Please for <see cref="F:CAS.AdType.Banner"/> use new ad size api <see cref="M:CAS.IMediationManager.GetAdView(CAS.AdSize)"/>.isReady instead.</para>
            </summary>
        </member>
        <member name="M:CAS.IMediationManager.ShowAd(CAS.AdType)">
            <summary>
            Force show ad by selected <see cref="T:CAS.AdType"/>.
            <para>Please for <see cref="F:CAS.AdType.Banner"/> use new ad size api <see cref="M:CAS.IMediationManager.GetAdView(CAS.AdSize)"/>.SetActive(true) instead.</para>
            </summary>
        </member>
        <member name="M:CAS.IMediationManager.GetAdView(CAS.AdSize)">
            <summary>
            Get the ad view interface for specific <paramref name="size"/>.
            <para>If a view for specific size has already been created then a reference to it
            will be returned without creating a new one.</para>
            <para>The newly created AdView has an inactive state. When you are ready to show the ad on the screen,
            simply call a <see cref="M:CAS.IAdView.SetActive(System.Boolean)"/> method.</para>
            <para>If you no longer need the AdView with this size, please call <see cref="M:System.IDisposable.Dispose"/> to free memory.</para>
            <para>After calling Dispose(), you can use GetAdView() method to create a new view.</para>
            </summary>
            <param name="size">The ad size you want using.</param>
        </member>
        <member name="E:CAS.IMediationManager.OnAppReturnAdShown">
            <summary>
            Called when the ad is displayed.
            </summary>
        </member>
        <member name="E:CAS.IMediationManager.OnAppReturnAdOpening">
            <summary>
            The same call as the <see cref="E:CAS.IMediationManager.OnAppReturnAdShown"/> but with <see cref="T:CAS.AdMetaData"/> about the impression. 
            </summary>
        </member>
        <member name="E:CAS.IMediationManager.OnAppReturnAdImpression">
            <summary>
            Called when the ad impression detects paid revenue.
            </summary>
        </member>
        <member name="E:CAS.IMediationManager.OnAppReturnAdFailedToShow">
            <summary>
            Called when the ad is failed to display.
            </summary>
        </member>
        <member name="E:CAS.IMediationManager.OnAppReturnAdClicked">
            <summary>
            Called when the user clicks on the Ad.
            </summary>
        </member>
        <member name="E:CAS.IMediationManager.OnAppReturnAdClosed">
            <summary>
            Called when the ad is closed.
            </summary>
        </member>
        <member name="M:CAS.IMediationManager.SetAppReturnAdsEnabled(System.Boolean)">
            <summary>
            The Return Ad which is displayed once the user returns to your application after a certain period of time.
            <para>To minimize the intrusiveness, short time periods are ignored.</para>
            <para>Return ads are disabled by default.</para>
            </summary>
        </member>
        <member name="M:CAS.IMediationManager.SkipNextAppReturnAds">
            <summary>
            Calling this method will indicate to skip one next ad impression when returning to the app.
            <para>You can call this method when you intentionally redirect the user to another application (for example Google Play)
            and do not want them to see ads when they return to your application.</para>
            </summary>
        </member>
        <member name="M:CAS.IMediationManager.SetEnableAd(CAS.AdType,System.Boolean)">
            <summary>
            Set enabled <see cref="T:CAS.AdType"/> to processing.
            <para>If processing is inactive then all calls to the selected ad type
            will fail with error <see cref="F:CAS.AdError.ManagerIsDisabled"/>.</para>
            <para>The state will not be saved between sessions.</para>
            </summary>
        </member>
        <member name="M:CAS.IMediationManager.IsEnabledAd(CAS.AdType)">
            <summary>
            Check enabled <see cref="T:CAS.AdType"/> is processing.
            Read more about <see cref="M:CAS.IMediationManager.SetEnableAd(CAS.AdType,System.Boolean)"/>.
            </summary>
        </member>
        <member name="P:CAS.IMediationManager.lastPageAdContent">
            <summary>
            The latest free ad page for your own promotion.
            <br>This ad page will be displayed when there is no paid ad to show or internet availability.</br>
            <br>By default, this page will not be displayed while the ad content is NULL.</br>
            <para>**Attention!** Impressions and clicks on this ad page don't make money.</para>
            </summary>
        </member>
        <member name="F:CAS.InitialConfiguration.error">
            <summary>
            Get the CAS manager initialization error message or NULL if initialization is successful.
            Check constants from <see cref="T:CAS.InitializationError"/> class.
            </summary>
        </member>
        <member name="F:CAS.InitialConfiguration.manager">
            <summary>
            Get the initialized CAS manager.
            </summary>
        </member>
        <member name="F:CAS.InitialConfiguration.countryCode">
            <summary>
            Get the user's ISO-2 country code, or NULL if the location fails.
            </summary>
        </member>
        <member name="F:CAS.InitialConfiguration.isConsentRequired">
            <summary>
            The consent must be requested from the user.
            </summary>
        </member>
        <member name="F:CAS.InitializationError.NoConnection">
            <summary>
            Indicates that device network connection is not stable enough.
            Your listener is stored in memory and will be called when initialization is successful.
            </summary>
        </member>
        <member name="F:CAS.InitializationError.NotRegisteredID">
            <summary>
            Indicates that the CAS ID is not registered in system.
            Contact support to clarify the reasons.
            </summary>
        </member>
        <member name="F:CAS.InitializationError.VerificationFailed">
            <summary>
            Indicates that the SDK version is no longer compatible.
            Please update to the latest SDK.
            </summary>
        </member>
        <member name="F:CAS.InitializationError.ServerError">
            <summary>
            Indicates a temporary problem with the server.
            If the error could be 100% replicated, please give feedback to us.
            </summary>
        </member>
        <member name="P:CAS.ITargetingOptions.gender">
            <summary>
            The userâ€™s gender
            </summary>
        </member>
        <member name="P:CAS.ITargetingOptions.age">
            <summary>
            The userâ€™s age
            <para>Limitation: 1-99 and 0 is 'unknown'</para>
            </summary>
        </member>
        <member name="P:CAS.ITargetingOptions.locationCollectionEnabled">
            <summary>
            Collect from the device the latitude and longitude coordinated truncated to the
            hundredths decimal place.
            <para>Collect only if your application already has the relevant end-user permissions.</para>
            <para>Does not collect if the target audience is children.</para>
            <para>By default selected in `Assets/CleverAdsSolutions/Settings` menu</para>
            </summary>
        </member>
        <member name="P:CAS.ITargetingOptions.contentURL">
            <summary>
            Sets the content URL for a web site whose content matches the app's primary content.
            This web site content is used for targeting and brand safety purposes.
            <para>Limitation: max URL length 512</para>
            </summary>
        </member>
        <member name="M:CAS.ITargetingOptions.SetKeywords(System.Collections.Generic.IList{System.String})">
            <summary>
            A list of keywords, interests, or intents related to your application.
            Words or phrase describing the current activity of the user for targeting purposes.
            </summary>
        </member>
        <member name="M:CAS.LastPageAdContent.#ctor(System.String,System.String,System.String,System.String,System.String)">
             <summary>
             The latest free ad page for your own promotion.
             This ad page will be displayed when there is no paid ad to show or internet availability.
            
             Apply this content to  <see cref="P:CAS.IMediationManager.lastPageAdContent"/>
             </summary>
             <param name="headline">Enter the message that you want users to see.</param>
             <param name="adText">Enter a description for the app being promoted. Optional property.</param>
             <param name="destinationURL">Enter the URL that CAS will direct users to when they click the ad.
             This URL is not visible in the ad.</param>
             <param name="imageURL">Enter the direct URL of the image to be used as the ad file. Optional property.</param>
             <param name="iconURL">Enter the direct URL of the icon or logo (Small square picture). Optional property.</param>
        </member>
        <member name="F:CAS.LoadingManagerMode.FastestRequests">
            <summary>
            Automatic control loading mediation ads.
            <para>Provides frequent polling of mediation networks for advertising content.</para>
            <para>May increase coverage with more expensive ads.</para>
            <para>But this will run more background processes that slow down the application.</para>
            </summary>
        </member>
        <member name="F:CAS.LoadingManagerMode.FastRequests">
            <summary>
            Automatic control loading mediation ads.
            <para>Provides frequent polling of mediation networks for advertising content.</para>
            <para>May increase coverage with more expensive ads.</para>
            <para>But this will run more background processes that slow down the application.</para>
            </summary>
        </member>
        <member name="F:CAS.LoadingManagerMode.Optimal">
            <summary>
            Automatic control loading mediation ads.
            <para>Provides balanced polling rate of mediation networks for advertising content.</para>
            <para>Doesn't significantly affect application performance.</para>
            </summary>
        </member>
        <member name="F:CAS.LoadingManagerMode.HighePerformance">
            <summary>
            Automatic control loading mediation ads.
            <para>Provides slow polling of mediation networks for advertising content.</para>
            <para>This helps to reduce the impact of background processes on the application.</para>
            <para>At the same time, do not lose much of the relevance of the high cost of advertising content.</para>
            <para>Reduces memory reservations for advertising content.</para>
            </summary>
        </member>
        <member name="F:CAS.LoadingManagerMode.HighestPerformance">
            <summary>
            Automatic control loading mediation ads.
            <para>Provides slow polling of mediation networks for advertising content.</para>
            <para>This helps to reduce the impact of background processes on the application.</para>
            <para>At the same time, do not lose much of the relevance of the high cost of advertising content.</para>
            <para>Reduces memory reservations for advertising content.</para>
            </summary>
        </member>
        <member name="F:CAS.LoadingManagerMode.Manual">
            <summary>
            Manual control loading mediation ads.
            <para>Provides minimal impact on application performance.</para>
            <para>But it requires manual preparation of advertising content for display.</para>
            <para>Use ad loading methods before trying to show: <see cref="M:CAS.IMediationManager.LoadAd(CAS.AdType)"/></para>
            <para>Reduces memory reservations for advertising content.</para>
            </summary>
        </member>
        <member name="F:CAS.PriceAccuracy.Floor">
            <summary>
            The estimated revenue, can also be a minimum price (floor) for ad impression.
            </summary>
        </member>
        <member name="F:CAS.PriceAccuracy.Bid">
            <summary>
            The revenue provided as part of the real-time auction.
            </summary>
        </member>
        <member name="F:CAS.PriceAccuracy.Undisclosed">
            <summary>
            The revenue is '0', when the demand source does not agree to disclose the payout of impression.
            </summary>
        </member>
        <member name="T:CAS.EventExecutor">
            <summary>
            Callbacks from CleverAdsSolutions are not guaranteed to be called on Unity thread.
            You can use EventExecutor to schedule each calls on the next Update() loop
            </summary>
        </member>
        <member name="M:CAS.EventExecutor.Initialize">
            <summary>
            Creation of the Executor component if needed.
            </summary>
        </member>
        <member name="M:CAS.EventExecutor.IsActive">
            <summary>
            Is initialized already.
            </summary>
        </member>
        <member name="M:CAS.EventExecutor.Add(System.Action)">
            <summary>
            Schedule action on the next Update() loop in Unity Thread.
            <para>Warning! To enable EventExecutor requires call once static <see cref="M:CAS.EventExecutor.Initialize"/> method.</para>
            </summary>
        </member>
        <member name="F:CAS.MediationExtras.facebookAdvertiserTracking">
            <summary>
            Advertising Tracking Enabled for Audience Network for iOS Only.
            <para>Set the `FBAdSettings.setAdvertiserTrackingEnabled` flag.</para>
            <para>Value "1" flag to inform Audience Network to use the data to deliver personalized ads
            in line with your own legal obligations, platform terms, and commitments youâ€™ve made to your users</para>
            <para>Value "0" flag to inform Audience Network to not be able to deliver personalized ads.</para>
            </summary>
        </member>
        <member name="F:CAS.MediationExtras.facebookDataProcessing">
             <summary>
             Facebook Data Processing Options for Users in California
             <para>Set the `FBAdSettings.setDataProcessingOptions` flag.</para>
             <para>Values:</para>
             <para>- ""  - To explicitly not enable Limited Data Use (LDU) mode</para>
             <para>- "LDU"  - To enable LDU mode using geolocation</para>
             <para>- "LDU_1_1000"  - To enable LDU for users and specify user geography</para>
            
             <para>For information about how to implement Facebookâ€™s Limited Data Use flag in California,
             visit <a href="https://developers.facebook.com/docs/marketing-apis/data-processing-options">Facebookâ€™s developer documentation</a>.</para>
             </summary>
        </member>
    </members>
</doc>
